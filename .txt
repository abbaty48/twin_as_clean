const Material = (props: { materials: IMaterial[] }) => {

   const { materials } = props
   // 
   const { Option } = Select
   //
   const [{ cloths }, setSchedule] = useRecoilState(ScheduleSelector)
   //
   const [material, setMaterial] = useState<IMaterial>({
      name: materials[0].name,
      price: materials[0].price,
      quantity: materials[0].quantity,
      subPrice: materials[0].price * 1
   })

   // console.log('METERIALS: ', materials)
   // console.log('METERIAL: ', material)

   const onQuantityChange = (quantity: number | null) => {
      const _updateMaterial = Object.assign({ ...material }, { ['quantity']: quantity!, ['subPrice']: material.price * material.quantity })
      console.log('UPDATE: ', _updateMaterial)
      setMaterial(_values => ({
         ..._updateMaterial
      }))
      const _updatedCloths =
         [...cloths].map(_cloth => {
            if (_cloth.name === _updateMaterial.name) {
               return { ..._cloth, quantity: quantity!, subPrice: _updateMaterial.subPrice }
            } else
               return _cloth
         });

      console.log('UPDATD CLOTHS', _updatedCloths)
      setSchedule((prevStates) => ({
         ...prevStates,
         cloths: _updatedCloths
      }))
   } // end onQuantityChange

   const onMaterialChange = (value: any, option: DefaultOptionType | DefaultOptionType[]) => {
      const { name, price } = JSON.parse(value) as { name: string, price: number }
      const _updateMaterial = Object.assign({ material }, { name, price, subPrice: price * material.quantity })
      setMaterial(_values => ({
         ..._values,
         ..._updateMaterial
      }))
      setSchedule((prevStates) => ({
         ...prevStates,
         cloths: [
            ...prevStates.cloths,
            { name, price, quantity: material.quantity, subPrice: _updateMaterial.subPrice }
         ]
      }))
   } // end onMaterialChange

   return <div className='flex flex-nowrap my-1 mx-3 items-center justify-between space-x-2 w-full'>
   
      <Select size='large' placeholder='Cloth Type' labelInValue={false}
         defaultValue={JSON.stringify({ name: material.name, price: material.price })}
         className={'my-3 flex-1 bg-white placeholder:text-[#919EAB]'}
         onChange={onMaterialChange}
      >
         {
            materials.map(_option =>
               <Option key={_option.name} value={JSON.stringify({ name: _option.name, price: _option.price })}>
                  <Space>
                     <span>{_option.name}</span>
                     <strong>({_option.price})</strong>
                  </Space>
               </Option>
            )
         }

      </Select>
      <InputNumber size='large' min={1} defaultValue={material.quantity} placeholder={'Quantity'}
         className={'my-3 border border-[#E1DFDD] placeholder:text-[#919EAB]'} onChange={onQuantityChange} />
   </div>

    return <div className='flex flex-nowrap my-1 items-center justify-between space-x-2 relative'>
      <Select size='large' placeholder='Cloth Type' labelInValue={false} bordered={false}
         defaultValue={material.name}
         className={'py-2 bg-white placeholder:text-[#919EAB] w-9/12 border border-[#919EAB] h-[56px] rounded-2xl'}
         onChange={onMaterialChange}
      >
         {
            materials.map(_option =>
               <Option key={_option.name} value={JSON.stringify({ targetId: material.id, id: _option.id, name: _option.name, price: _option.price })}>
                  <Space>
                     <span>{_option.name}</span>
                     <strong>({_option.price})</strong>
                  </Space>
               </Option>
            )
         }

      </Select>

      <InputNumber size='large' min={1} defaultValue={material.quantity} placeholder={'Quantity'}
         className={'py-2 placeholder:text-[#919EAB] border border-[#919EAB] h-[56px] rounded-2xl'} onChange={onQuantityChange} />
      <button className={'hover:bg-none hover:animate-pulse flex items-center w-4 h-4'}>
         <ReactSVG src={CloseSVG} />
      </button>
   </div>
}

const SelectItemsPhase = () => {

   const { totalAmountOnline, cloths } = useRecoilValue(ScheduleSelector)
   // FETCH MATERIALS FROM SERVER
   const loadMaterial = async () => {
      try {
         // return (await axios.get<IMaterial[]>('http://18.209.48.108/materials', { headers: { Accept: 'application/json' } })).dat
         return [
            {
               "id": "4fc05b5b-d92e-4bea-99ba-ef041fdcb8b3",
               "name": "Kaftan",
               "price": 3000,
               "quantity": 1,
               "subPrice": 0
            },
            {
               "id": "43ac1ce6-13da-4647-a49f-78618a0ab6a6",
               "name": "Trouser",
               "price": 1000,
               "quantity": 1,
               "subPrice": 0
            },
            {
               "id": "9e801216-b439-46dd-8a0b-0757e4488f03",
               "name": "T-Shirt",
               "price": 1000,
               "quantity": 1,
               "subPrice": 0
            },
            {
               "id": "56ecd752-474d-43aa-a08b-46409efe36dd",
               "name": "Short Nikka",
               "price": 400,
               "quantity": 1,
               "subPrice": 0
            },
            {
               "id": "6342de7b-b229-422e-8f60-bb8bd23e75a3",
               "name": "Hijab",
               "price": 550,
               "quantity": 1,
               "subPrice": 0
            },
            {
               "id": "b12d2d10-40b5-44a0-8079-3f4279c23529",
               "name": "Cap",
               "price": 3000,
               "quantity": 1,
               "subPrice": 0
            },
            {
               "id": "e411f23e-311b-4307-b2fe-69b978a9c7d2",
               "name": "Sallaya",
               "price": 1000,
               "quantity": 1,
               "subPrice": 0
            },
            {
               "id": "59ae5b6a-5489-4279-a1ec-5498fe876a5f",
               "name": "Abaya",
               "price": 1200,
               "quantity": 1,
               "subPrice": 0
            }
         ]
      } catch (error: any) {
         throw new Error(error.message)
      }
   }

   const addMoreChanges = (nodes: JSX.Element[]) => {
      console.log('ONCHANGE')
   }

   return (
      <div className={'flex flex-col justify-between space-y-2 my-1 m-auto w-11/12'}>
         <h1 className={'text-[32px] leading-10 font-medium'}>Select Items</h1>
         <p className={'text-lg leading-[132.2%]'}>Select cloth type and quantity</p>
         <Async promiseFn={loadMaterial}>
            {
               ({ data, error, isLoading }) => {
                  if (isLoading) return <Spin size='large' spinning={true} />
                  if (error) return <p className={'my-1 text-center text-orange-700 font-semibold text-xs'}>Oops!! something went wrong: {error.message}</p>
                  if (data) {
                     return <div className={'max-h-48 overflow-y-auto'}>
                        <AddMore ReplicateNode={<Material materials={data} />}
                           orientation={AddMoreOrientation.Vertical}
                           addMoreButtonClass='text-3xl' removeButtonClass='text-2xl'
                           onChange={addMoreChanges}
                        >
                           {
                              cloths.map(_option => (
                                 <Material key={_option.name} materials={[{ ..._option }]} />
                              ))
                           }
                        </AddMore>
                     </div>
                  }
                  return null
               }
            }
         </Async>
         <div className={'flex flex-row items-center justify-between w-full py-2 px-5 rounded-2xl bg-[#f1f1f1]'}>
            <p className={'text-[18px]'}>Amount</p>
            <strong className={'text-[24px] font-semibold'}>{totalAmountOnline}</strong>
         </div>
      </div>
   )
}


 <Async promiseFn={loadMaterial}>

               {
                  ({ data, error, isLoading }) => {
                     if (isLoading) return <Spin size='large' spinning={true} className={'place-self-center object-center'} />
                     if (error) return <p className={'my-1 text-center text-orange-700 font-semibold text-xs'}>Oops!! something went wrong: {error.message}</p>
                     if (data) {
                        if (data.length <= 0) {
                           return <p>No Material available yet!.</p>
                        } else {

                           return <>
                              {
                                 selectedMaterials.map(_option => (
                                    <Material key={_option.name} materials={[{ ..._option }]} />
                                 ))
                              }
                              <button className={'my-2 w-full h-10 bg-secondary-color rounded-2xl py-3 px-2'} onClick={addMoreMaterial}>
                                 + Add More
                              </button>
                           </>
                        } // end else
                     } // end if data
                     return null
                  }
               }
            </Async>


               <>
            {isFetching && <Spin />}
            {
               materials === undefined ? <p className={'text-center font-body my-3'}>No Material available yet!.</p> :
                  materials.length > 0 && <>
                     <div className={'max-h-32 overflow-y-auto'}>

                        {
                           selectedMaterials?.map(_option => (
                              <Material key={_option.id} materials={unSelectedMaterials} />
                           ))
                        }
                     </div>
                     <button className={'my-2 w-full h-10 bg-secondary-color rounded-2xl py-3 px-2 text-white'} onClick={addMoreMaterial}>
                        + Add More
                     </button>
                  </>
            }
         </>


         const { data, error, isLoading } = useFetch<IMaterial[]>('', (data) => {
      if (data !== null) {
          dispatch({
             type: StateActions.SET_STATES,
             payload: {
                ...state,
                materials: data,
                selectedMaterials: [data[0]],
                unSelectedMaterials: data
             }
         })
         dispatch({
            type: StateActions.SET_PHONENUMBER,
            payload: '134'
         })
      }
   })